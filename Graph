BFS:

vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        vector<int> ans;
        bool visited[V+1];
        for(int i=0;i<V;i++){
            visited[i] = false;
        }
        queue<int> q;
        q.push(0);
        visited[0] = true;
        while(q.empty() == false){
            int u = q.front();
            q.pop();
            ans.push_back(u);
            for(int v : adj[u]){
                if(visited[v] == false){
                    visited[v] = true;
                    q.push(v);
                }
            }
        }
        return ans;
    }


DFS:

void dfs(int node,vector<int>&ans,vector<int>&visited,vector<int>adj[]){
        ans.push_back(node);
        
        visited[node] =1;
        for(auto it:adj[node]){
            if(visited[it]==0)
            dfs(it,ans,visited,adj);
        }
    }
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        vector<int>visited(V,0);
        vector<int>ans;
        
        dfs(0,ans,visited,adj);
        return ans;
    }
};
